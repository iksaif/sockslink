#! /bin/sh

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/sockslinkd
NAME=sockslinkd
DESC=sockslinkd

. /lib/lsb/init-functions

test -x $DAEMON || exit 0

LOGDIR=/var/log/sockslink
PIDFILE=/var/run/$NAME.pid
DODTIME=2                   # Time to wait for the server to die, in seconds
                            # If this value is set too low you might not
                            # let some servers to die gracefully and
                            # 'restart' will not work

# Include sockslink defaults if available
if [ -f /etc/default/sockslink ] ; then
	. /etc/default/sockslink
fi

if [ -n "${DAEMON_NOT_CONFIGURED}" -a "x${DAEMON_NOT_CONFIGURED}" != "x0" ]; then
	echo "$DESC is not yet configured, please edit /etc/default/sockslink."
	exit 0
fi

running_pid()
{
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected child?
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running()
{
# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    # Obtain the pid and check it against the binary name
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

force_stop() {
# Forcefully kill the process
    [ ! -f "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
        # Is it really dead?
        [ -n "$DODTIME" ] && sleep "$DODTIME"s
        if running ; then
            kill -9 $pid
            [ -n "$DODTIME" ] && sleep "$DODTIME"s
            if running ; then
                log_failure_msg "Cannot kill $LABEL (pid=$pid)!"
		log_end_msg 1
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE
    return 0
}

do_start() {
	log_daemon_msg "Starting $DESC"

	if running; then
		log_failure_msg "(already running)"
		log_end_msg 1
		return 0
	fi

	start-stop-daemon --start --quiet --pidfile $PIDFILE \
		--exec $DAEMON -- --pidfile $PIDFILE $DAEMON_OPTS
	RC=$?
	log_end_msg $RC
	return $RC
}

do_stop()
{
	log_daemon_msg "Stopping $DESC"
	start-stop-daemon --stop --quiet --pidfile $PIDFILE \
		--exec $DAEMON
	RC=$?
	if [ $RC -eq 1 ]; then
		rm -f $PIDFILE
		log_failure_msg "(not running)"
		log_end_msg $RC
	elif [ $RC -eq 2 ]; then
		log_failure_msg "(failed to stop)"
		log_end_msg $RC
	else
		rm -f $PIDFILE
		log_end_msg 0
	fi
	return $RC
}

case "$1" in
  start)
	do_start
	;;
  stop)
	do_stop
	;;
  force-stop)
	log_daemon_msg "Forcefully stopping $DESC"
        force_stop
	log_end_msg $?
	;;
  reload)
	log_daemon_msg "Reloading $DESC helpers files."
	start-stop-daemon --stop --signal 1 --quiet --pidfile \
		$PIDFILE --exec $DAEMON
	log_end_msg $?
	;;
  restart)
	do_stop
	[ -n "$DODTIME" ] && sleep $DODTIME
	do_start
	;;
  status)
        echo -n "$DESC is "
	if running ;  then
		echo "running (`cat $PIDFILE`)"
	else
		echo "not running."
		exit 1
	fi
	;;
  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|reload|force-reload|status|force-stop}" >&2
	exit 1
	;;
esac

exit 0
